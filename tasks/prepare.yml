---

- name: This repository will therefore no longer be actively maintained.
  ansible.builtin.fail:
    msg: |
      Further development of this Ansible role has been moved to Collection bodsch.prometheus.
      This repository will therefore no longer be actively maintained.
  ignore_errors: true

- name: wait 10 seconds to realise the message
  delegate_to: localhost
  ansible.builtin.wait_for:
    timeout: 10

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        - default.yaml
      skip: true

- name: define delegate instance for download handling
  ansible.builtin.set_fact:
    mysql_exporter_delegate_to: "{{ ansible_host }}"
    mysql_exporter_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/mysql_exporter', true) }}/{{ mysql_exporter_version }}"
  when:
    - mysql_exporter_direct_download

- name: update package cache
  ansible.builtin.package:
    update_cache: true

- name: install dependency
  ansible.builtin.package:
    name: "{{ mysql_exporter_requirements }}"
    state: present
  when:
    - mysql_exporter_requirements | default([]) | count > 0

- name: get latest release
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - mysql_exporter_version == "latest"
  block:
    - name: get latest release
      delegate_to: localhost
      become: false
      run_once: true
      bodsch.scm.github_latest:
        project: prometheus
        repository: mysqld_exporter
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      register: _latest_release

    - name: re-define mysql_exporter_version
      ansible.builtin.set_fact:
        mysql_exporter_version: "{{ _latest_release.latest_release }}"

- name: detect installed mysql_exporter
  ansible.builtin.stat:
    path: "{{ mysql_exporter_install_path }}/mysql-exporter"
    get_checksum: false
  register: stat_mysql_exporter_binary

- name: create download directory
  become: false
  delegate_to: "{{ mysql_exporter_delegate_to }}"
  ansible.builtin.file:
    path: "{{ mysql_exporter_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: user and group handling
  when:
    - mysql_exporter_system_user != "root"
  block:
    - name: create mysql_exporter group
      ansible.builtin.group:
        name: "{{ mysql_exporter_system_group }}"
        state: present
        system: true

    - name: create mysql_exporter user
      ansible.builtin.user:
        name: "{{ mysql_exporter_system_user }}"
        groups: "{{ mysql_exporter_system_group }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        createhome: false
        home: /nonexistent

- name: create install directory
  ansible.builtin.file:
    path: "{{ mysql_exporter_install_path }}"
    state: directory
    owner: "{{ mysql_exporter_system_user }}"
    group: "{{ mysql_exporter_system_group }}"
    mode: 0755

- name: merge mysql_exporter configuration between defaults and custom
  ansible.builtin.set_fact:
    mysql_exporter_service: "{{ mysql_exporter_defaults_service | combine(mysql_exporter_service, recursive=True) }}"
    mysql_exporter_credentials: "{{ mysql_exporter_defaults_credentials | combine(mysql_exporter_credentials, recursive=True) | has_credentials }}"

- name: warn if no database credentials have been configured.
  when:
    - mysql_exporter_credentials | default({}) | count == 0
  block:
    - name: warn if no database credentials have been configured.
      ansible.builtin.fail:
        msg: |
          No database credentials have been configured.
          Therefore, it cannot be guaranteed that the exporter will work as expected.

          From a security point of view, it makes sense to create and use appropriate credentials.
      ignore_errors: true

    - name: wait 5 seconds to realise the message
      delegate_to: localhost
      ansible.builtin.wait_for:
        timeout: 5

...
